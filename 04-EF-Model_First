ORM Tools 

EF başlangıç      2010
bu iki connection string yazıları çok farklıydı. EF 1000 lerce kod yazıyordu. Sorumluluk yazılımdaydı.
Uzun vadede güncelleme yapılmak istendiğinde ya da değişiklik yapılmak istendiğinde yönetilebilir değildi, zorluk yaşatıyordu.
Örnek bir senaryo gösterdi derste. Detayı videoda. Dosya ebatı şişmemesi için sildi.
Yaklaşımları;
Database First (Hazır DB) => EF => Model Sınıfları ve Context Sınıfı olusturulur...
Model First    (Hazır DB Yok)   => Modelleri ve Context sınıfını olustur => EF => DB yi olusturuyor...


EF 4.0 core değil dikkat!!!   2013-2014            2025 desteğin kesileceği tarih
Code first yaklaşımına geçildi.
(Yazılım Firmalarını MS zorlaması sonucunda gelmiştir...)
connection string eski yaygın bilinen formatına dönüştürülmüştür.
Code First(uzun vadeli projeleri daha yonetilebilir hale getiriyor...) 
Yüzlerce kod oluşturmuyor. Sorumluluk yazılımcıda. MS extra sınıf yazmıyor. Biz genellikle türetme, interface ve polymophism için override kullanıyoruz. Uzun vadeli projelerde daha yönetilebilir.
Kendi içerisinde;
       Database First
       Model First

LINQ to SQL Classes tan gelen bir alışkanlık. İki yöntem vardı; Model first Database first   -   2008

Çift sürümler LTS 

CORE 6
  Model First    (CODE First)
  Database First (CODE First)

EF CORE diğer RDBS lerde de kullanılabiliyor. Bu çok güzel bir özellik. Yani VS ortamında birçok DB ile çalışılabiliyor, onların dilini öğrenmeye gerek kalmadan.
Veritabanı programcılığı - ERM diagramları - araştır. ERM (Entity Relationship Model)

Tablolar Entitydir.

Javacılar genellikle HyberNate, nHyberNate

MongoDB JSON olarak tutuyor. Dolayısıyla obje olarak tuttuğundan EF vb ORM tooluna ihtiyaç kalmıyor. JSON veriyor, JSON alıyor ama DB mantığı OOP.
Literatürde OO veritabanları var ama büyükler RDBMS in kaymağını yiyene kadar geçmeye niyetli değil. (Oracle, DB2 (IBMin), Microsoft vs.)

Elektrikli otomobiller 100 yıl önce de yapılmıştı ama yine gündeme geldi. Petrol lordları...

1960 - ilişkisel veritabanı kavramının ortaya çıktığı tarih

1998, 1999 - XML in çıkışı

XML, CSV, JSON vb data sharing yani veriyi payklaşmak, veriyi taşımak amacıyla çıkarılıyor. 
A ortamındaki veriyi B ortamına aktarmak istediğimizde yani. Ya da bir servis data gönderecekken kullanır. İki uygulamayı konuşturur.
DB bütün olarak gönderemez. Tablo olarak gönderse karşı taraf tabloyu anlamaz. Ortak bir paylaşım formatı.

//----------------

  Model First kullanarak Database olusturma...

  1-Oncelikle Nuget uzerinden gerekli kutuphaneleri indir...
  2-Modelleri olustur... (Models klasörü içine)
  POCO Classes(Plain Old CLR Object) .net i oluşturan sistemler. CLR çalıştıran - VSL kütüphane. CLR neyin ne zaman çalışıp sonlanacağına CLR karar verir.
  Model: Veri tutamak amacıyla oılustrulan aynı zamanda veritabanında bir tablonun şemasını oluşturan sınıflara denir...
  3-Context sınıfını olustur ve DbContext sınıfından turet. (Data klasörü içine) Context database e karşılık geliyor.
  4-DbSet<T> Her tabloya karşılık gelen prop. ları yaz...

//----------------
  
  **** Mutlaka Her Modelde; N.S.A.; bir PK olması gerekir...
   1- Bir property Id şeklide ise... EF anlar. Tablo adı Ogrenciler. Buna göre PK adının ID olması lazım. 
Sadece Id kullanmak sorgu yazarken sıkıntı yaşanmasına neden olabiliyor.Cleancode a aykırı.
   2- [EntityName]ID şeklinde ise... EF anlar. Tablo adı Ogrenciler. Buna göre PK adının OgrencilerID olması lazım.
   3- Attribute kullanarak...
   4- Fluent API kullanarak... C#5 yada 6 ? yaklaşık 2-3 senelik bir konu // seni öne geçirecek bir konu. Her sene eleğin ölçüsü daralıyor.

//----------------
  
  Navigation Properties (Primary Key - Foreign Key)

  İlişkiler propertyler üzerinden verilir.
  
  1-1    ModelA-ModelB !!
  1-M    ModelA- ICollection<ModelB>
  M-M    ICollection<ModelA> - ICollection<ModelB> //Hoca bunu da çok tercih etmediğini söyledi. Dikkat!! ara tablo üzerinden bağlantı


M-M ilişkilerle ilgili özel durum vardı : ara tablo. EF ara tabloyu kendisi DBye koydu ama Modele koymadı. ArabaMusteri. NŞA iki PK olmaz Bu tabloda Composite Key (birleşik anahtar) var. 
SQL keys altından kontrol et, 1 PK 2 FK var.
Modele koymadığı için _context dediğimizde çıkmadı. extra kod yazmamak için modelini de biz oluşturacağız.



//Tabloların sutun tipleri, uzunlukları, kısıtlar nasıl olusturulur...
  // ilişkiler, keyler...
  1-Attribute kullanımı...
  2-Dogrudan OnModelCreating() metodu içerisinde...
  3-ITypeEntityConfiguration arayuzunu uygulamış olan Config sınıfı içerisinde (***)


  //Veritabanında ilk deger ataması nasıl yapılır...
  1- OnModelCreating() metodunda 
      modelBuilder.Entity<T>().HasData() metodu ile...
  2-ITypeEntityConfiguration arayuzunu uygulamış olan Config sınıfı içerisinde
      buider.HasData() metodu ile ....


UnitOfWork pattern: Tek bir SaveChanges() metyodu ile birden fazla veriyi guncelleme, ekleme, silme islemlerini yapmak icin kullanılır...


Sistem Analizi diye bir konu var.


Attribute konusunda da bir sıkıntı var; Modelde her propertye bir çok Attribute yazdıkça cleancode bozuluyor. 
Bunu MS Fluent API olarak çözdü.
Kod yazma maliyeti biraz artıyor ama bakımı (maintenance) kolay.
Genellikle bir cfg sınıfı açılır ve model cnf bilgilerini oradan çeker.

Cleancode yazabilmek çok önemli.
Değişken isimleri, notasyonlar, okunabilirliği arttırmak için ne yapıyorsun, şiir gibi mi, şiir kitaplarındaki 2 satır yazıp boş bırakmak gibi.




//-----------------------------------------------------------------------------------------------------------------------

// Hocaya içimden bir ses ArabaContext ve Araba class larının tek classta olabilme durumunu sorduğumda DTO ya geldiğimizde bahsederiz dedi. Hatırlat.
// DTO (Data Transfer Object) : https://academy.patika.dev/courses/net-core/2-viewmodel-ve-dto-kavrami

//-----------------------------------------------------------------------------------------------------------------------



UYGULAMA

PK kullanmadığımız senaryolarda ki %2 yaklaşık, hasnokey kullanılır.
Her tabloda PK olmayabilir, olmak zorunda da değil. Özellikle çok yoğun verinin geldiği durumlarda performansı arttırmak için bazı tablolarda PK bilerek kullanılmayabilir.
Çünkü MSSQL size isteseniz de istemeseniz de PK oluşturduğumuzda arkada clustered index oluşturur.
Indexlemenin de sistem kaynağı ve donanım yani alan olarak maliyeti var. 
Indexlenmemiş sql sorguları geç gelir.


//SQL içerisinde DB nin, tablonun, tablo içinde PK, alanlar ve veri tiplerinin oluştuğunu gördük fakat double float, string nvarchar max oluştu, 
Bunları attribute kullanımıyla düzenledik ve sonradan allow nulls olabilecek şekilde ayarladık!!!
//Tabloları birbirine bağladık. İlk Marka modelinden başlayarak yukarıdaki sıraya göre. Sonra ilk yazdığımız Marka prop yorum satırına aldık. Araba modeline MarkaID 
prop eklemememize rağmen EF DB tabloda getirdi fakat böyle tercih etmiyoruz. Form loadda  _context.Arabalar.Add(new Araba() {   }); prop MarkaID gelmedi. 
Arkayüzde otomatik alanı oluşturdu ama new içinde nav prop içinden ulaşabiliriz. Dolayısıyla Araba modeline public int MarkaID { get; set; } ekledik.
Nav prop avantajlarından biri FK yı da otomatik oluşturuyor. SQL içinden Keys altından gördük.


// Sql içinde DB altında new database diagramdan ilişkiyi şema olarak ta görebilirsin.

// daha sonra tip değiikliğini üst seviyeye çıkarırsanız sıkıntı olmaz ama aşağı indirirseniz olma ihtimali var.

// aile arabası isteyene ferrari vermemelisin.
// Herşey ameliyat etmeden de tedavi edilebilir. Hangi durumda kim kazanıyor? Sen ve devlet kaybetmemelisin? Elindeki seçenekleri bilmeden olmaz?



//Models Klasörü içerisinde;

public class Araba
    {
        public int ArabaID { get; set; }
        //public string  Plaka { get; set; }
        //public string Marka { get; set; }
        
        [StringLength(100)] //Attribute kullanımı. Kırmızı yanarsa kütüphane yükle. Attribute lar sadece propertylere değil classlara da uygulanabilir 
        //ve dikkat!! StringLength aslında bir class. 
        //Literatürde bu yöntem Attribute Oriented Programming olarak geçiyor.
        // 20-30 tane data annotation var.
        [Column(TypeName ="varchar")]                    
        public string Model { get; set; }

        //herhangi bir tipin yanına ? konulursa nullable olur veya bkz cfg class içinde; .IsRequired(); içine false. SQL de allow nulls tiklenecek.
        public int? ModelYili { get; set; }

        [Column(TypeName ="money")]
        public double  Fiyat { get; set; }

        [StringLength(20),Column(TypeName ="varchar")] // Arka arkaya Attribute kullanımı.
        public string Renk { get; set; }


        public int MarkaID { get; set; }
        //Nav. Prop.
        public virtual Marka Marka { get; set; }

        //Nav prop...
        //public ICollection<Musteri> Musteriler { get; set; }

        public virtual ICollection<ArabaMusteri> Musteriler { get; set; }

        //Attribute  dikkat [Key] yazılırsa primary key olur.
        [ForeignKey("ArabaID")]
        public virtual Plaka Plaka { get; set; }
    }

//---------------

//Models Klasörü içerisinde;

public class ArabaMusteri
    {
        public int ID { get; set; }

        public int ArabaID { get; set; }
        public int MusteriID { get; set; }

        public virtual Araba Araba { get; set; }
        public virtual Musteri Musteri { get; set; }
    }

//---------------

//Models Klasörü içerisinde;

public class Marka
    {
        public int MarkaID { get; set; }
        public  string MarkaAdi { get; set; }

        //Nav. Prop.
        public virtual ICollection<Araba> Arabalar { get; set; }
    }

//---------------

//Models Klasörü içerisinde;

public class Musteri
    {
        public int MusteriID { get; set; }
        public string MusteriAdi { get; set; }

        //Nav. prop...
        //public ICollection<Araba> Arabalar { get; set; }


        public virtual ICollection<ArabaMusteri> Arabalar { get; set; }
    }
//---------------

//Models Klasörü içerisinde;

public class Plaka
    {
        public int PlakaID { get; set; }
        public string PlakaNo{ get; set; }

        public virtual Araba Araba { get; set; }
    }

//---------------

//Data Klasörü içerisinde;

1.
// Tools-Nuget Package Manager-Mnage Nuget For Solution-Browse-Entity framework core arat. 
Sırasıyla;
1. Microsoft.EntityFrameworkCore version 6.0.20 install-
2. Microsoft.EntityFrameworkCore.SqlServer version 6.0.20 install- eğer db oracle olsaydı onunla ilgili provider ı yüklemek gerekir.
Solution windowda dependencies altında packages altında yüklenenler kontrol edilir.

2.
//ArabaContext sınıfına DbContext özellikleri aktarılır.
//usingi gelmezse ekle.
// c ve c++ ta using lerin kullanılmadığında silinmesi gerekir fakat C# ta soluk benizli ifade edilir ve silinmesi gerekemez. Kullanılmadıkça dll leri eklemez.
//Fareyle DBContext üzerine gelip çıkan tooltipteki açıklamaları oku.

3.
//Her modelin aşağıdaki gibi dbsetini oluştur. Özel durumlar; yazmadığımız durumlar var mesela abstract ssınıflarda.
SQL de tablonun adı Arabalar, sütunların ismi modeldeki propertyler.
public DbSet<Araba> Arabalar { get; set; }

4.
//Alt kısımda database bağlantısı için override on yazdığımızda çıkan metodu seç ve connection stringi yaz.
//Başka yöntemler de var.



public class ArabaContext:DbContext
    {
        public DbSet<Araba> Arabalar { get; set; }
        public DbSet<Marka> Markalar { get; set; }
        public DbSet<Musteri> Musteriler { get; set; }
        public DbSet<ArabaMusteri> Araba_Musteri { get; set; }
        public  DbSet<Plaka> Plakalar { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            optionsBuilder.UseSqlServer("Data source=.;Initial catalog=YZL3440_GaleriDB;integrated security=true");

       // Dikkat!!! Lazy Loading kullanabilmek için yani UseLazyLoadingProxies gelmesi için nugetten Microsoft.EntityFrameworkCore.Proxies indirip diğer eklentilerin aynı veriyonuyla kur.
       //Bir sınıfı JSON olarak oluşturmasını istiyorsunuz diyelim serileştirme yapacaksınız. Sonsuz döngüye düşüyor çünkü nav prop gidiyor. 
       //Servislerle ilgili çalışırken serileştirme yaparsanız hata verir.
       //Nav prop ta kendi içinde kendini tekrar takrar çağırıyor.
       //Kolay yöntem sorulduğu için anlattı. Tavsiye edilmiyor. 
       //MS core da ayrı kütüphaneye koydu ve enable yapılması şartını koydu ama düz EF de zaten varsayılan böyle. Nav prop larda virtual ile kullanılıyor.
       //Performans noktasında eager loading tavsiye edilir.

            optionsBuilder.UseLazyLoadingProxies();
            base.OnConfiguring(optionsBuilder);
        }


       // DİKKAT : Fluent API.  

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            //Fluent API... 

            //DİKKAT MusteriAdi için 1. YÖNTEM : ayrı class içinde değil ArabaContext içine 

            modelBuilder.Entity<Musteri>().Property(x => x.MusteriAdi)
                                          .HasMaxLength(50)
                                          .HasColumnType("varchar")
                                          .IsRequired();


              // Başlangıç için veri girişi 1. Yöntem //params konusu dikkat o tipte istenilen kadar giriş konusu
       
            modelBuilder.Entity<Musteri>().HasData(
                 new Musteri {  MusteriID=1, MusteriAdi="Cevdet Dursun"},
                 new Musteri {  MusteriID=2, MusteriAdi="Selami Atmaca"},
                 new Musteri {  MusteriID=3, MusteriAdi="Dursun Durmasin"}
                );


            //Fluent API... 

            //DİKKAT MarkaAdi için 2. YÖNTEM : ayrı class içinde **** TERCİH EDİLEN

            //modelBuilder.ApplyConfiguration() çıkan tooltipteki overloadın yorumu : Generic Marka olacak 
       ve sonrasında öyle bir sınıf yaz ki IEntityTypeConfiguration interface ini implemente etmiş olsun (generic içine yazdığın modele dikkat)
       Configuration klasörü oluştur ve altına devam et.

            //Herşeyi OnModelCreating içine koyarsam bu sefer burası yani ArabaContext:DbContext içi şişecekti.

            modelBuilder.ApplyConfiguration<Marka>(new MarkaCFG());

            base.OnModelCreating(modelBuilder);
        }
    }

//---------------

//Configuration Klasörü içerisinde;

// Açıklama yukarıda... 2. Yöntem

public class MarkaCFG : IEntityTypeConfiguration<Marka>
    {
        
       // aşağıdaki metod implemente gelen metod. İçini revize ettik.

       public void Configure(EntityTypeBuilder<Marka> builder)

       //Delege ve event kullanımlarında detaylandırılacak.
       //Delege metod taşır. 
       //(x => x) örneğin marka girerse marka çıkar gibi. ilk giren x in sonradan parçalarına ulaşabilmek için.
       //Func yazınca yanında delegate yazdı ve mor çanta sembolü var. Metodun rengi de mor. Yani metod taşıyor.
       //Action da Func gibi delegate

       // -> thin arrow operatörü (c ve c++ ta pointer konularında geçiyor) , => fat arrow operatörü, ? elvis operatörü
       // lambda ile metot da yazılabiliyor.

        {
            builder.Property(x => x.MarkaAdi)
                                   .IsRequired(true) // içi boş bırakılırsa varsayılan true. 
                                                        Ayrıca imzada [] işaretleri içindeki parametre optinal ya da default parameters anlamına geliyordu. 
                                                        Named parameters ile aynı zamanda öğrenmiştik.
                                   .HasColumnType("varchar")
                                   .HasMaxLength(30);


              // Başlangıç için veri girişi 2. Yöntem
            builder.HasData(
                new Marka() { MarkaID=1, MarkaAdi="Ferrari" },
                new Marka() { MarkaID=2, MarkaAdi="BMW" },
                new Marka() { MarkaID=3, MarkaAdi="Mercedes" },
                new Marka() { MarkaID=4, MarkaAdi="Audi" },
                new Marka() { MarkaID=5, MarkaAdi="Renault" }
                );
           
        }
    }

//--------------- FORM UYGULAMA -----------------------------


// Ekrandaki textbox, combobox ve datagridview ları isimlendir.

// Markayı Combobox tan seçtireceğiz. verdiği idye göre aratacağız.

            //Oncelikle;
            //kullanıcıdan tum verileri al...
            //Plaka tablosuna plakayı kaydet, olusan ID' yi al Araba tablosuna aktar...
            //Markalar tablosundan gelen secili Markanın MarkaID sini arabalar tablosundaki markaID ile eslestir...
            //Sonra Araba tablosuna kaydet....

//Arabalar tablosuna ekleme yapmak istersek... // Dikkat ArabaID plakadan gelecek ama formda disable gösterecek.

//ArabaID plaka tablosundan geleceğinden önce plaka .......


public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        ArabaContext _context = new ArabaContext();
        private void Form1_Load(object sender, EventArgs e)
        {
            
            //Formdan girilen verilerin uçmaması için devre dışı bıraktık. Katmanlı mimari konusunda migration anlatılacak.
            // varsa sil
            //_context.Database.EnsureDeleted();
            // yoksa oluştur
            //_context.Database.EnsureCreated();


            // Boş formda yapılan ilk gün çalışmasında;

            //İlişkileri yazmadan çalıştırdık, hata verdi.
            //EF her tabloda standart olarak bir PK istiyor.
            //Dikkat!!! Tablo bağlanmadan önceki çalışma
            //Arabalar tablosuna ekleme yapmak istersek...
            //SQL deki insert e karşılık geliyor. ArabaID kabul etmedi.
            //Araba araba = new Araba() { 
            //  Marka="Ferrari", Model= "Enzo", Plaka="34 Fer 34", ModelYili=2010, Renk="Kırmızı", Fiyat=1750000  
            //};
            //_context.Arabalar.Add(araba);
            //Her operasyonda yapılması gerekir. SQL cümlelerine çevrilebilmesi için.
            //_context.SaveChanges();
            //veya
            // _context.Arabalar.Add(new Araba() {   });
            //_context.SaveChanges();


            //Markalar tablosundaki tum verileri getir ComboBox'a aktar...
            cmbMarka.DataSource = _context.Markalar.ToList();

            //Namespace ve sınıf isimleri geldi. Bunu çözmek için;
            cmbMarka.DisplayMember = "MarkaAdi";
            cmbMarka.ValueMember = "MarkaID";





            //Form Yüklenirken arabalar tablosundaki verileri grid'e yukle...
            // dataGridView1.DataSource = _context.Arabalar.ToList();
            // Bu şekilde datagridwiew de eksik ve hatalı veriler geldi yani istediğimiz gibi gelmedi.
            //Join yapmam ve bazı alanları görmek istemiyorum ve gelmesini istediğim alanlar var.

            //1. Yöntem;
            //var result = from a in _context.Arabalar
            //             join p in _context.Plakalar
            //             on a.ArabaID equals p.PlakaID
            //             select new { a.Renk, a.MarkaID, p.PlakaID };
            //dataGridView1.DataSource = result.ToList();

            //2. Yöntem;*****
            //Eager Loading JOIN islemi... EF de Eager Loading özelliği. Normalde düz EF de hala varsayılan yükleme ayarı Lazy Loading ve varsayılan disable. Açılması gerekiyor. Tarifi yukarıda.
            //EF Core da 3 tane var. Eager Loading, 
            //Lazy Loading (Core ilk çıkınca kaldırılmıştır sonra Core 2.1 ile geri gelmiştir. aktif olarak kullanamıyoruz, ayarları var ve varsayılan olarak kapalı) 
            //ve Explisp Loading
            //Join yazmadan Include yazarak arkaplanda işi daha kolaylaştırıyoruz. Arkada kendisi Join cümlesini hallediyor.
            //SQL deki query builder gibi burada lazy loading var.
            //var result = _context.Arabalar.Include(x => x.Marka).Include(x => x.Plaka).Select(x => new {x.Plaka.PlakaNo, x.Marka.MarkaAdi, x.Renk, x.Fiyat, x.Model, x.ModelYili  });
            //dataGridView1.DataSource = result.ToList();

            //3. Yöntem;
            //Lazy Loading yöntemine göre sorgu: ayarından sonra aşağıdakini yazdık ama erişim hatası verdi. Tüm classları pubic e çevirdik ve tüm nav prop virtual ekledik.
            //Buradaki virtualın polymorphism ile alakası yok. EF çalışma mantığıyla ilgili. Yükleme mekanizmasını değiştiriyoruz.
            //Dikkat var ın tipi IQueryable a tipinde yani anonymus olarak.
            //İleriki konularda anlatılacak olan view modelde bu amaçla kullanılır. anonymus type kullanmak istemiyorsam view modeller oluşturuyoruz bu şekilde. 
            //Bu verileri view modele atıyoruz. Joinlenmiş verilere kendi viewlerimizi yazıyoruz
            //SELECT * FROM ....
            //var result = _context.Arabalar.Select(x => new { x.Plaka.PlakaNo, x.Marka.MarkaAdi, x.Renk, x.Fiyat, x.Model, x.ModelYili });
            //dataGridView1.DataSource = result.ToList();





            //Filtrelemeler; where extension method ve Ienumerable instance na bağlı bkz metod imzası
            
            //rengi kırmızı olanlar gelsin
            //var result = _context.Arabalar.Select(x => new { x.Plaka.PlakaNo, x.Marka.MarkaAdi, x.Renk, x.Fiyat, x.Model, x.ModelYili }).Where(x=>x.Renk =="Kirmizi");
            //dataGridView1.DataSource = result.ToList();

            //ıcınde k olanlar ve harfe göre sıralama ve top sıralama ... where ile ilgili delegelerde daha farklı özellikler göreceğiz.
            var result = _context.Arabalar.Select(x => new { x.Plaka.PlakaNo, x.Marka.MarkaAdi, x.Renk, x.Fiyat, x.Model, x.ModelYili }).Where(x => x.Renk.StartsWith("K")).OrderBy(x=>x.Fiyat).Take(1);
            //dataGridView1.DataSource = result.ToList();

            //ÇOK ÖNEMLİ!!!  SQL CÜMLELERİNİ VEYA SORGU HATASI OLUP OLMADIĞINI BURADAN DA YAKALAYABLİRSİN! SQL SORGUSUNDAN ANLAMAZ VS.           
            //Windows ta SQL Server Profiler tool unu aç. New - Use to Template ten T-SQL seç. Artık serveri dinlemeye başladı. VS de kodu çalıştırınca select cümlesi oraya düşecek.
            //MVC DE BUNU OTOMATİK OLARAK KONSOLA DÖKÜYOR.

            //var result = _context.Arabalar.Select(x => new { x.Plaka.PlakaNo, x.Marka.MarkaAdi, x.Renk, x.Fiyat, x.Model, x.ModelYili }).Where(x => x.Renk == "Kirmizi");

            dataGridView1.DataSource = result.ToList();
        }



        // Dikkat!!! Farklı bir metod yazım şekli.

        private void button1_Click(object sender, EventArgs e)
        {
              // Anomim (yani isim yok, parametre yok, oladabilir, delege konularında anlatılacak.) metod (prop, const, deconst vs. bu şekilde yazılır. 
       İlk girdiği yer Lambda exp. sonra dilin içinde kanser gibi yayıldı.
              
              var fn = () => MessageBox.Show("Merhaba Dunya");

            fn();
        }



        private void btnKaydet_Click(object sender, EventArgs e)
        {
            //Oncelikle;
            //kullanıcıdan tum verileri al...
            //Plaka tablosuna plakayı kaydet, olusan ID' yi al Araba tablosuna aktar...
            //Markalar tablosundan gelen secili Martkanın MarkaID sini
            // arabalar tablosundaki markaID ile eslestir...
            //Sonra Araba tablosuna kaydet....

            #region 1_Yontem_Geleneksel
            //Plaka plaka = new Plaka()
            //{
            //    PlakaNo = txtPlaka.Text
            //};

            //_context.Plakalar.Add(plaka);
            //_context.SaveChanges();

            //Araba araba = new Araba()
            //{
            //    ArabaID = plaka.PlakaID,
            //    MarkaID = Convert.ToInt32(cmbMarka.SelectedValue),
            //    Model = txtModel.Text,
            //    Fiyat = double.Parse(txtFiyat.Text),
            //    Renk = txtRenk.Text

            //_context.Arabalar.Add(araba);
            //_context.SaveChanges();
            //};
            #endregion



            #region 2_Yontem UoW(Unit Of Work) //EF bu paterni destekler. Nav prop üzerinden gerekli olan id yi kendisi atıyor.*****ÖNERİLEN YÖNTEM
            Plaka plaka = new Plaka()
            {
                PlakaNo = txtPlaka.Text
            };

            _context.Plakalar.Add(plaka);


            Araba araba = new Araba()
            {
                //ArabaID = plaka.PlakaID,
                //Plaka araba classı içindeki nav prop, plaka ise yukarıda kullanıcının girdiği instance
                //Oraya Id nin gelebilmesi için PK nın oluşması gerekiyor. Plakayı önce Plakalar tablosunda kaydetmem lazım. Bunun için ilk yöntemde SaveChanges yaptık.
                //Gitti Plakalar tablosuna kaydetti ve oradan Plaka Id yi aldı ArabaId sine atadı. Yani bunun için iki defa SaveChanges yaptı.
                //Ne kadar değişiklik yaparsan yap; bu patern tek seferde Db ye gidip gereken değişiklikleri yapıyor. 
                Plaka = plaka,
                MarkaID = Convert.ToInt32(cmbMarka.SelectedValue),
                Model = txtModel.Text,
                Fiyat = double.Parse(txtFiyat.Text),
                Renk = txtRenk.Text,
                ModelYili = int.Parse(txtModelYili.Text)
            };

            _context.Arabalar.Add(araba);
            _context.SaveChanges();
            #endregion


        }
    }
